#include <SPI.h>
#include <Ethernet.h>

// Endereço MAC e IP
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
//IPAddress ip(10, 197, 12, 227);
IPAddress ip(192, 168, 1, 7);

// Cria o servidor HTTP na porta 80
EthernetServer server(80);

const int ledPin = 8; // Pino conectado ao LED

void setup() {
  pinMode(ledPin, OUTPUT);
  Ethernet.begin(mac, ip);
  server.begin();
  
  Serial.begin(9600);
  Serial.print("Servidor iniciado em: ");
  Serial.println(Ethernet.localIP());
}

void loop() {
  EthernetClient client = server.available();
  if (client) {
    boolean currentLineIsBlank = true;
    String request = "";
    
while (client.connected()) {
  if (client.available()) {
    char c = client.read();
    request += c;
    
    if (c == '\n' && currentLineIsBlank) {
      // Imprime o conteúdo completo da requisição para debug
      //Serial.println("Requisição completa:");
      //Serial.println(request);
      
      if (request.indexOf("GET /led/on") >= 0) {
        digitalWrite(ledPin, HIGH);
        Serial.println("LED ligado");
      }
      else if (request.indexOf("GET /led/off") >= 0) {
        digitalWrite(ledPin, LOW);
        Serial.println("LED desligado");
      }
      
      // Envia resposta HTTP simples
      client.println("HTTP/1.1 200 OK");
      client.println("Content-Type: text/html");
      client.println("Connection: close");
      client.println();
      client.println("<!DOCTYPE HTML>");
      client.println("<html>");
      client.println("<h1>LED Controlado</h1>");
      client.println("</html>");
      break;
    }
    
    if (c == '\n') {
      currentLineIsBlank = true;
    } else if (c != '\r') {
      currentLineIsBlank = false;
    }
  }
}

    delay(1);
    client.stop();
  }
}
